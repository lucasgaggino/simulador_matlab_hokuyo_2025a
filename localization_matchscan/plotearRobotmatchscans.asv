function [] = plotearRobotmatchscans(particles,pose, map, frame_num, save_fig,planner,innit_pos,goal_pos,mapPC,tfrom,scan,stats,ranges,pose_history)
%UNTITLED5 Summary of this function goes here
%   Detailed explanation goes here
%   save_fig: boolean - true to save figures invisibly, false to display them

% Handle optional parameters
if nargin < 5
    save_fig = false; % Default to showing figures (not saving)
end
if nargin < 4
    frame_num = 1; % Default frame number if not provided
end

% Create figure - invisible if saving, visible if displaying
if save_fig
    fig = figure('Visible', 'off');
else
    fig = figure(1); % Use figure 2 for display as before
end

subplot(2,2,1)

% Display the map as underlay in grayscale
show(map)
colormap(flipud(gray))  % Set inverted grayscale for map background
hold on
% Extract pose components

%plot init and goal
plot(innit_pos(1),innit_pos(2),'go', 'MarkerSize', 10, 'MarkerFaceColor', 'g', 'LineWidth', 2);
plot(goal_pos(1),goal_pos(2),'bo', 'MarkerSize', 10, 'MarkerFaceColor', 'b', 'LineWidth', 2);

pose_x = pose(1);
pose_y = pose(2);
pose_w = pose(3); % orientation angle

% Plot circle for robot position
plot(pose_x, pose_y, 'ro', 'MarkerSize', 10, 'MarkerFaceColor', 'r', 'LineWidth', 2);

% Plot line for orientation
arrow_length = 0.4; % Length of the orientation line
arrow_x = pose_x + arrow_length * cos(pose_w);
arrow_y = pose_y + arrow_length * sin(pose_w);
plot([pose_x, arrow_x], [pose_y, arrow_y], 'r-', 'LineWidth', 2);

x=particles(1,:);
y=particles(2,:);
theta=particles(3,:);%orientation of particles
c=particles(4,:);%color en base al peso

% Find indices of top 3 particles by weight
[~, sorted_indices] = sort(c, 'descend');
top3_indices = sorted_indices(1:min(10, length(c)));

% Create color array: dark green for top 3, blue for rest
particle_colors = repmat([0, 0, 1], length(x), 1); % All blue initially
particle_colors(top3_indices, :) = repmat([0, 0.5, 0], length(top3_indices), 1); % Top 3 dark green

scatter(x,y,[],particle_colors,'filled')


% Plot orientation lines for particles

particle_arrow_length = 0.3; % Length of particle orientation lines
for i = 1:length(x)
    arrow_x_end = x(i) + particle_arrow_length * cos(theta(i));
    arrow_y_end = y(i) + particle_arrow_length * sin(theta(i));
    plot([x(i), arrow_x_end], [y(i), arrow_y_end], 'k-', 'LineWidth', 1);
end

% Plot the pose as a circle with an arrow



hold off
%% plot del pathfinder
subplot(2,2,2)
show(planner)

%% plot nube de puntos
subplot(2,2,3)
scan2Tformed = transformScan(scan,tfrom);
scanreal = transformScan(scan,pose);
plot(mapPC)
hold on
plot(scan2Tformed)
plot(scanreal)
%plot(truePose(1), truePose(2), 'go', 'MarkerSize', 10, 'MarkerFaceColor', 'r', 'LineWidth', 2)
%plot(error_pose_corrected(1), error_pose_corrected(2), 'ko', 'MarkerSize', 10, 'LineWidth', 2)

leg_names= ["Map","Transformed Scan", "Real Scan"];
legend(leg_names,'Location','Best');
title(["Score:",stats.Score])
hold off

%% viz

subplot(2,2,4)
% Manual visualization instead of using viz object
% Show the map background
show(map)
hold on

% Extract pose components
x = pose(1);
y = pose(2);
theta = pose(3);

% Plot robot position and orientation
plot(x, y, 'ro', 'MarkerSize', 8, 'MarkerFaceColor', 'r');

% Plot robot orientation arrow
arrow_length = 0.3;
arrow_x = x + arrow_length * cos(theta);
arrow_y = y + arrow_length * sin(theta);
plot([x, arrow_x], [y, arrow_y], 'r-', 'LineWidth', 3);

% Plot lidar rays if ranges are provided
if exist('ranges', 'var') && ~isempty(ranges)
    % Get scan angles from the LidarSensor (assuming same angles as in main script)
    num_scans = length(ranges);
    scan_angles = linspace(deg2rad(-90), deg2rad(90), num_scans);
    
    for i = 1:length(ranges)
        if ~isnan(ranges(i)) && ranges(i) > 0
            alpha = theta + scan_angles(i);
            lidar_x = x + ranges(i) * cos(alpha);
            lidar_y = y + ranges(i) * sin(alpha);
            plot([x, lidar_x], [y, lidar_y], 'b-', 'LineWidth', 0.5);
        end
    end
end


title('Robot and Lidar Visualization');
axis equal;
plot(pose_history(1,:),pose_history(2,:),'r-','LineWidth',2);
hold off



set(gcf, 'Position', [10 10 1000 1000]);

%% save plot

% Save figure if requested, otherwise just display
if save_fig
    % Create filename with zero-padded frame number
    filename = sprintf('imgs/frame_%04d.png', frame_num);
    
    % Save the figure
    saveas(fig, filename, 'png');
    
    % Close the figure to save memory
    close(fig);
end


end

